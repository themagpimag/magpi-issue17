Welcome back to the C cave.  Before going any further, here is the solution to the problem in Issue 13.

Challenge solution

#ifndef PYTHIA_H
#define PYTHIA_H

typedef struct {
  int msel;
  int mselpd;
  int msub[500];
  int kfin[81][2];
  double ckin[200];
} PYSUBS;
extern PYSUBS pysubs_;

void pyinit_(char *, char *, char *, double *, int, int, int);
void pystat_(int *);
void pyevnt_(void);
void pylist_(int *);
void pyhepc_(int *);

#endif

To use the solution, write it to a file called python.h and put it into the same directory as the C program, Makefile and Pythia FORTRAN file.  Then compile and run the program.

Unions

The syntax of declaring a union is the same as that of a struct.  However, unlike a struct, each of the data members share the same memory space as each other.  The amount of memory allocated to a union instance is set by the largest data member.  Similar to structs, union data members can be structs, unions or simple types (float, int, etc.).  The memory allocation can be demonstrated with a simple example,

#include <stdio.h>

union share {
  int index;
  float value;
  unsigned char bytes[8];
};

int main() {
  union share s;
  printf("Size of s = %lu\n",sizeof(s));
  printf("Size of s.index = %lu, address of s.index = %p\n",sizeof(s.index),&s.index);
  printf("Size of s.value = %lu, address of s.value = %p\n",sizeof(s.value),&s.value);
  printf("Size of s.bytes = %lu, address of s.bytes = %p\n",sizeof(s.bytes),&s.bytes);
  return 0;
}

where the result of compiling and running this code is:

Size of s = 8
Size of s.index = 4, address of s.index = 0x7fff5fbff040
Size of s.value = 4, address of s.value = 0x7fff5fbff040
Size of s.bytes = 8, address of s.bytes = 0x7fff5fbff040

The unsigned char type uses one byte per element in the array.  This means that the array uses eight bytes.  The int and float types typically use four bytes with the default gcc compiler options.  Therefore, the of the union uses eight bytes.  Notice that the memory address of each of the data members is the same.  Try modifying this example by changing the union for struct.  Then re-run it and compare the size and addresses of the data members.  The result will be:

Size of s = 16
Size of s.index = 4, address of s.index = 0x7fff5fbff030
Size of s.value = 4, address of s.value = 0x7fff5fbff034
Size of s.bytes = 8, address of s.bytes = 0x7fff5fbff038

which demonstrates that the memory allocation of a struct is sequential and the total size is the sum of the sizes of the data members.

An union can be useful for encoding or decoding variables in a binary data stream.  For example, one of the union members could be a basic type such as an unsigned char array.  Then the basic type is written or read from a binary file, while the more complex type is uses within the program.

Dynamic memory allocation

Sometimes the size of the memory needed for a given stage of a program is not known at compile time.  Instead of declaring a large block of memory when it might not be needed, dynamic memory allocation allows a program to request or free memory use as needed.

#include <stdio.h>
#include <unistd.h>
int main(int argc, char *argv[]) {
  int *buffer = 0;
  unsigned int i, num_elements = 0;

  if(argc != 2) {
    printf("Usage: %s <number of elements>\n",argv[0]);
    return 1;
  }
  sscanf(argv[1],"%u",&num_elements);
  if(num_elements == 0) {
    printf("Error: the size of the array must be greater than 0\n");
    return 2;
  }  

  /* Sleep for 10 seconds. */
  sleep(10);

  /* Request a block of memory long enough for 1000 integers */
  buffer = (int*)malloc(sizeof(int)*num_elements);

  /* Check if the request was successful or not. */
  if(!buffer) {
    printf("Error: malloc failed\n");
    return 3;
  } 

  /* Now use the memory as needed. */
  for(i; i<num_elements; i++) {
    buffer[i] = i;
  }

  /* Print the last element to show that it is used. */
  printf("buffer[%u]=%u\n",num_elements-1,buffer[num_elements-1]);

  /* Sleep for 10 seconds. */
  sleep(10);

  /* Free the memory allocated to buffer. */
  free(buffer);

  /* Sleep for 10 more seconds. */
  sleep(10);

  return 0;
}

This program demonstrates how to request a block of memory on the heap and then free it again.  Compile the program using gcc.  Then open another terminal window and type top.  In the first terminal window, run the program

./dynamic-allocation 10000000

and then watch what happens using top.  The memory allocation of the program is initially quite small.  Then when the array is declared, the size will jump up.  Then after ten more seconds, the size of the example program will drop down again.  The function malloc returns a void pointer and the function free takes a void pointer as the single input variable.  Since malloc returns a void pointer, the example program casts the point pointer to the type of pointer needed.

Dynamic memory allocation memory functions in C are declared in the stdlib.h header file.  Type man malloc for more information.
